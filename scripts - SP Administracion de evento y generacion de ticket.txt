--------------------------------------------------------------------------------
-- 2.3. Administración de Eventos (evento)
--------------------------------------------------------------------------------

-- SP_InsertarEvento: Inserta un nuevo evento
CREATE OR REPLACE FUNCTION SP_InsertarEvento(
    p_id_museo NUMERIC,
    p_fecha_inicio_evento DATE,
    p_fecha_fin_evento DATE,
    p_nombre_evento VARCHAR(150),
    p_institucion_educativa VARCHAR(150) DEFAULT NULL,
    p_cantidad_asistentes NUMERIC DEFAULT NULL,
    p_lugar_exposicion VARCHAR(100) DEFAULT NULL,
    p_costo_persona NUMERIC DEFAULT NULL
)
RETURNS NUMERIC AS $$
DECLARE
    v_id_evento NUMERIC;
BEGIN
    -- Validar que el museo existe
    IF NOT EXISTS (SELECT 1 FROM museo WHERE museo.id_museo = p_id_museo) THEN
        RAISE EXCEPTION 'Museo con ID % no encontrado.', p_id_museo;
    END IF;

    -- Validar que la fecha de fin no sea anterior a la fecha de inicio
    IF p_fecha_fin_evento < p_fecha_inicio_evento THEN
        RAISE EXCEPTION 'La fecha de fin del evento (%) no puede ser anterior a la fecha de inicio (%).', p_fecha_fin_evento, p_fecha_inicio_evento;
    END IF;

    INSERT INTO evento (
        id_museo,
        fecha_inicio_evento,
        fecha_fin_evento,
        nombre_evento,
        institucion_educativa,
        cantidad_asistentes,
        lugar_exposicion,
        costo_persona
    ) VALUES (
        p_id_museo,
        p_fecha_inicio_evento,
        p_fecha_fin_evento,
        p_nombre_evento,
        p_institucion_educativa,
        p_cantidad_asistentes,
        p_lugar_exposicion,
        p_costo_persona
    ) RETURNING id_evento INTO v_id_evento;

    RETURN v_id_evento;
END;
$$ LANGUAGE plpgsql;

-- SP_ActualizarEvento: Actualiza los datos de un evento existente
CREATE OR REPLACE FUNCTION SP_ActualizarEvento(
    p_id_museo NUMERIC,
    p_id_evento NUMERIC,
    p_fecha_inicio_evento DATE DEFAULT NULL,
    p_fecha_fin_evento DATE DEFAULT NULL,
    p_nombre_evento VARCHAR(150) DEFAULT NULL,
    p_institucion_educativa VARCHAR(150) DEFAULT NULL,
    p_cantidad_asistentes NUMERIC DEFAULT NULL,
    p_lugar_exposicion VARCHAR(100) DEFAULT NULL,
    p_costo_persona NUMERIC DEFAULT NULL
)
RETURNS VOID AS $$
DECLARE
    v_current_fecha_inicio DATE;
    v_current_fecha_fin DATE;
BEGIN
    -- Validar si el evento existe
    SELECT fecha_inicio_evento, fecha_fin_evento
    INTO v_current_fecha_inicio, v_current_fecha_fin
    FROM evento
    WHERE evento.id_museo = p_id_museo AND evento.id_evento = p_id_evento;

    IF NOT FOUND THEN
        RAISE EXCEPTION 'Evento con ID % en museo % no encontrado.', p_id_evento, p_id_museo;
    END IF;

    -- Validar que la fecha de fin no sea anterior a la fecha de inicio (considerando updates parciales)
    IF COALESCE(p_fecha_fin_evento, v_current_fecha_fin) < COALESCE(p_fecha_inicio_evento, v_current_fecha_inicio) THEN
        RAISE EXCEPTION 'La fecha de fin del evento (%) no puede ser anterior a la fecha de inicio (%).', COALESCE(p_fecha_fin_evento, v_current_fecha_fin), COALESCE(p_fecha_inicio_evento, v_current_fecha_inicio);
    END IF;

    UPDATE evento
    SET
        fecha_inicio_evento = COALESCE(p_fecha_inicio_evento, fecha_inicio_evento),
        fecha_fin_evento = COALESCE(p_fecha_fin_evento, fecha_fin_evento),
        nombre_evento = COALESCE(p_nombre_evento, nombre_evento),
        institucion_educativa = COALESCE(p_institucion_educativa, institucion_educativa),
        cantidad_asistentes = COALESCE(p_cantidad_asistentes, cantidad_asistentes),
        lugar_exposicion = COALESCE(p_lugar_exposicion, lugar_exposicion),
        costo_persona = COALESCE(p_costo_persona, costo_persona)
    WHERE
        id_museo = p_id_museo AND id_evento = p_id_evento;
END;
$$ LANGUAGE plpgsql;

-- SP_EliminarEvento: Elimina un evento
-- NOTA: Las FKs a este evento deben ser manejadas (ej. tickets asociados, si aplica).
CREATE OR REPLACE FUNCTION SP_EliminarEvento(
    p_id_museo NUMERIC,
    p_id_evento NUMERIC
)
RETURNS VOID AS $$
BEGIN
    -- Validar si el evento existe
    IF NOT EXISTS (SELECT 1 FROM evento WHERE evento.id_museo = p_id_museo AND evento.id_evento = p_id_evento) THEN
        RAISE EXCEPTION 'Evento con ID % en museo % no encontrado.', p_id_evento, p_id_museo;
    END IF;

    -- Si hubiera una tabla de relación entre eventos y tickets, se debería validar aquí.
    -- Por ejemplo: IF EXISTS (SELECT 1 FROM tickets_eventos WHERE id_museo_evento = p_id_museo AND id_evento = p_id_evento) THEN ...
    -- Como no se proporcionó, no se incluye una verificación específica.

    DELETE FROM evento
    WHERE id_museo = p_id_museo AND id_evento = p_id_evento;
END;
$$ LANGUAGE plpgsql;

-- SP_ObtenerEventos: Obtiene información de uno o varios eventos
CREATE OR REPLACE FUNCTION SP_ObtenerEventos(
    p_id_museo NUMERIC DEFAULT NULL,
    p_id_evento NUMERIC DEFAULT NULL,
    p_nombre_evento VARCHAR(150) DEFAULT NULL,
    p_fecha_inicio_desde DATE DEFAULT NULL,
    p_fecha_inicio_hasta DATE DEFAULT NULL
)
RETURNS TABLE (
    id_museo NUMERIC,
    id_evento NUMERIC,
    fecha_inicio_evento DATE,
    fecha_fin_evento DATE,
    nombre_evento VARCHAR,
    institucion_educativa VARCHAR,
    cantidad_asistentes NUMERIC,
    lugar_exposicion VARCHAR,
    costo_persona NUMERIC,
    nombre_museo VARCHAR
) AS $$
BEGIN
    RETURN QUERY
    SELECT
        e.id_museo,
        e.id_evento,
        e.fecha_inicio_evento,
        e.fecha_fin_evento,
        e.nombre_evento,
        e.institucion_educativa,
        e.cantidad_asistentes,
        e.lugar_exposicion,
        e.costo_persona,
        m.nombre AS nombre_museo
    FROM
        evento e, museo m
    WHERE
        e.id_museo = m.id_museo AND
        (p_id_museo IS NULL OR e.id_museo = p_id_museo) AND
        (p_id_evento IS NULL OR e.id_evento = p_id_evento) AND
        (p_nombre_evento IS NULL OR e.nombre_evento ILIKE '%' || p_nombre_evento || '%') AND
        (p_fecha_inicio_desde IS NULL OR e.fecha_inicio_evento >= p_fecha_inicio_desde) AND
        (p_fecha_inicio_hasta IS NULL OR e.fecha_inicio_evento <= p_fecha_inicio_hasta)
    ORDER BY
        e.fecha_inicio_evento DESC;
END;
$$ LANGUAGE plpgsql;

--------------------------------------------------------------------------------
-- 2.4. Administración de Ingresos
--------------------------------------------------------------------------------

-- 2.4.1. Gestión de Tickets (ticket)

-- SP_InsertarTicket: Inserta un nuevo ticket de entrada
CREATE OR REPLACE FUNCTION SP_InsertarTicket(
    p_id_museo NUMERIC,
    p_tipo_ticket VARCHAR(20),
    p_cantidad NUMERIC DEFAULT 1
)
RETURNS VOID AS $$
DECLARE
    v_precio_ticket NUMERIC;
    i INT := 1;
BEGIN
    -- Validar que el museo existe
    IF NOT EXISTS (SELECT 1 FROM museo WHERE museo.id_museo = p_id_museo) THEN
        RAISE EXCEPTION 'Museo con ID % no encontrado.', p_id_museo;
    END IF;

    -- Validar el tipo de ticket
    IF p_tipo_ticket NOT IN ('niño', 'adulto', 'tercera edad') THEN
        RAISE EXCEPTION 'El tipo de ticket debe ser "niño", "adulto" o "tercera edad".';
    END IF;

    -- Validar que la cantidad sea un valor positivo
    IF p_cantidad <= 0 THEN
        RAISE EXCEPTION 'La cantidad de tickets a generar debe ser un valor positivo.';
    END IF;

    -- Obtener el precio actual del tipo de ticket
    SELECT precio INTO v_precio_ticket
    FROM tipo_ticket_historico
    WHERE tipo_ticket_historico.id_museo = p_id_museo AND tipo_ticket_historico.tipo_ticket = p_tipo_ticket AND tipo_ticket_historico.fecha_fin IS NULL;

    IF v_precio_ticket IS NULL THEN
        RAISE EXCEPTION 'No se encontró un precio activo para el tipo de ticket "%" en el museo %.', p_tipo_ticket, p_id_museo;
    END IF;

    -- Insertar la cantidad de tickets especificada
    WHILE i <= p_cantidad LOOP
        INSERT INTO ticket (
            id_museo,
            precio,
            tipo_ticket,
            fecha_hora_ticket
        ) VALUES (
            p_id_museo,
            v_precio_ticket, -- Usar el precio obtenido del historial
            p_tipo_ticket,
            CURRENT_TIMESTAMP -- Se genera automáticamente con la fecha y hora actuales. Si la columna 'fecha_hora_ticket' es de tipo DATE, la parte de la hora se truncará automáticamente. Para almacenar la hora, la columna debe ser TIMESTAMP.
        );
        i := i + 1;
    END LOOP;

END;
$$ LANGUAGE plpgsql;

-- SP_ActualizarTicket: Actualiza los datos de un ticket existente
-- NOTA: Se asume que el ID del ticket y el museo al que pertenece son la clave para actualizar.
-- No se permite cambiar el id_museo o el id_ticket en una actualización, solo sus atributos.
CREATE OR REPLACE FUNCTION SP_ActualizarTicket(
    p_id_museo NUMERIC,
    p_id_ticket NUMERIC,
    p_precio NUMERIC DEFAULT NULL,
    p_tipo_ticket VARCHAR(20) DEFAULT NULL,
    p_fecha_hora_ticket DATE DEFAULT NULL
)
RETURNS VOID AS $$
BEGIN
    -- Validar si el ticket existe
    IF NOT EXISTS (SELECT 1 FROM ticket WHERE ticket.id_museo = p_id_museo AND ticket.id_ticket = p_id_ticket) THEN
        RAISE EXCEPTION 'Ticket con ID % en museo % no encontrado.', p_id_ticket, p_id_museo;
    END IF;

    -- Validar el tipo de ticket si se proporciona
    IF p_tipo_ticket IS NOT NULL AND p_tipo_ticket NOT IN ('niño', 'adulto', 'tercera edad') THEN
        RAISE EXCEPTION 'El tipo de ticket debe ser "niño", "adulto" o "tercera edad".';
    END IF;

    -- Validar que el precio sea positivo si se proporciona
    IF p_precio IS NOT NULL AND p_precio <= 0 THEN
        RAISE EXCEPTION 'El precio del ticket debe ser un valor positivo.';
    END IF;

    UPDATE ticket
    SET
        precio = COALESCE(p_precio, precio),
        tipo_ticket = COALESCE(p_tipo_ticket, tipo_ticket),
        fecha_hora_ticket = COALESCE(p_fecha_hora_ticket, fecha_hora_ticket)
    WHERE
        id_museo = p_id_museo AND id_ticket = p_id_ticket;
END;
$$ LANGUAGE plpgsql;

-- SP_EliminarTicket: Elimina un ticket
CREATE OR REPLACE FUNCTION SP_EliminarTicket(
    p_id_museo NUMERIC,
    p_id_ticket NUMERIC
)
RETURNS VOID AS $$
BEGIN
    -- Validar si el ticket existe
    IF NOT EXISTS (SELECT 1 FROM ticket WHERE ticket.id_museo = p_id_museo AND ticket.id_ticket = p_id_ticket) THEN
        RAISE EXCEPTION 'Ticket con ID % en museo % no encontrado.', p_id_ticket, p_id_museo;
    END IF;

    DELETE FROM ticket
    WHERE id_museo = p_id_museo AND id_ticket = p_id_ticket;
END;
$$ LANGUAGE plpgsql;

-- SP_ObtenerTickets: Obtiene información de uno o varios tickets
CREATE OR REPLACE FUNCTION SP_ObtenerTickets(
    p_id_museo NUMERIC DEFAULT NULL,
    p_id_ticket NUMERIC DEFAULT NULL,
    p_tipo_ticket VARCHAR(20) DEFAULT NULL,
    p_fecha_desde DATE DEFAULT NULL,
    p_fecha_hasta DATE DEFAULT NULL
)
RETURNS TABLE (
    id_museo NUMERIC,
    id_ticket NUMERIC,
    precio NUMERIC,
    tipo_ticket VARCHAR,
    fecha_hora_ticket DATE
) AS $$
BEGIN
    RETURN QUERY
    SELECT
        t.id_museo,
        t.id_ticket,
        t.precio,
        t.tipo_ticket,
        t.fecha_hora_ticket
    FROM
        ticket t
    WHERE
        (p_id_museo IS NULL OR t.id_museo = p_id_museo) AND
        (p_id_ticket IS NULL OR t.id_ticket = p_id_ticket) AND
        (p_tipo_ticket IS NULL OR t.tipo_ticket = p_tipo_ticket) AND
        (p_fecha_desde IS NULL OR t.fecha_hora_ticket >= p_fecha_desde) AND
        (p_fecha_hasta IS NULL OR t.fecha_hora_ticket <= p_fecha_hasta)
    ORDER BY
        t.fecha_hora_ticket DESC;
END;
$$ LANGUAGE plpgsql;

-- 2.4.2. Historial de Precios de Tipos de Ticket (tipo_ticket_historico)

-- SP_RegistrarPrecioHistoricoTicket: Registra un nuevo precio histórico para un tipo de ticket.
-- Es importante que, si hay un registro "activo" (fecha_fin IS NULL) para el mismo tipo_ticket
-- en el mismo museo, se le asigne una fecha_fin antes de insertar un nuevo precio.
CREATE OR REPLACE FUNCTION SP_RegistrarPrecioHistoricoTicket(
    p_id_museo NUMERIC,
    p_fecha_inicio DATE,
    p_precio NUMERIC,
    p_tipo_ticket VARCHAR(15)
)
RETURNS VOID AS $$
BEGIN
    -- Validar que el museo existe
    IF NOT EXISTS (SELECT 1 FROM museo WHERE museo.id_museo = p_id_museo) THEN
        RAISE EXCEPTION 'Museo con ID % no encontrado.', p_id_museo;
    END IF;

    -- Validar el tipo de ticket
    IF p_tipo_ticket NOT IN ('niño', 'adulto', 'tercera edad') THEN
        RAISE EXCEPTION 'El tipo de ticket debe ser "niño", "adulto" o "tercera edad".';
    END IF;

    -- Opcional: Validar que el precio sea positivo
    IF p_precio <= 0 THEN
        RAISE EXCEPTION 'El precio debe ser un valor positivo.';
    END IF;

    -- Cierre cualquier registro histórico activo anterior para el mismo tipo de ticket en el mismo museo
    UPDATE tipo_ticket_historico
    SET fecha_fin = p_fecha_inicio - INTERVAL '1 day' -- Se establece la fecha de fin un día antes del nuevo inicio
    WHERE
        tipo_ticket_historico.id_museo = p_id_museo AND
        tipo_ticket_historico.tipo_ticket = p_tipo_ticket AND
        tipo_ticket_historico.fecha_fin IS NULL AND
        tipo_ticket_historico.fecha_inicio < p_fecha_inicio; -- Solo si el inicio es anterior al nuevo inicio

    INSERT INTO tipo_ticket_historico (
        id_museo,
        fecha_inicio,
        precio,
        tipo_ticket,
        fecha_fin
    ) VALUES (
        p_id_museo,
        p_fecha_inicio,
        p_precio,
        p_tipo_ticket,
        NULL -- Precio activo
    );
END;
$$ LANGUAGE plpgsql;

-- SP_ActualizarPrecioHistoricoTicket: Actualiza la fecha de fin o el precio de un registro histórico existente.
-- Generalmente se usa para finalizar un precio actual o corregir datos.
CREATE OR REPLACE FUNCTION SP_ActualizarPrecioHistoricoTicket(
    p_id_museo NUMERIC,
    p_fecha_inicio DATE, -- Clave primaria para identificar el registro
    p_nuevo_precio NUMERIC DEFAULT NULL,
    p_nueva_fecha_fin DATE DEFAULT NULL
)
RETURNS VOID AS $$
DECLARE
    v_current_fecha_inicio DATE;
    v_current_tipo_ticket VARCHAR(15);
BEGIN
    -- Validar si el registro existe y obtener datos actuales
    SELECT tth.fecha_inicio, tth.tipo_ticket
    INTO v_current_fecha_inicio, v_current_tipo_ticket
    FROM tipo_ticket_historico tth
    WHERE tth.id_museo = p_id_museo AND tth.fecha_inicio = p_fecha_inicio;

    IF NOT FOUND THEN
        RAISE EXCEPTION 'Registro histórico de precio para el museo % iniciado en % no encontrado.', p_id_museo, p_fecha_inicio;
    END IF;

    -- Validar que la nueva fecha de fin no sea anterior a la fecha de inicio
    IF p_nueva_fecha_fin IS NOT NULL AND p_nueva_fecha_fin < v_current_fecha_inicio THEN
        RAISE EXCEPTION 'La nueva fecha de fin (%) no puede ser anterior a la fecha de inicio (%).', p_nueva_fecha_fin, v_current_fecha_inicio;
    END IF;

    -- Validar que el nuevo precio sea positivo si se proporciona
    IF p_nuevo_precio IS NOT NULL AND p_nuevo_precio <= 0 THEN
        RAISE EXCEPTION 'El nuevo precio debe ser un valor positivo.';
    END IF;

    UPDATE tipo_ticket_historico
    SET
        precio = COALESCE(p_nuevo_precio, precio),
        fecha_fin = COALESCE(p_nueva_fecha_fin, fecha_fin)
    WHERE
        id_museo = p_id_museo AND fecha_inicio = p_fecha_inicio;
END;
$$ LANGUAGE plpgsql;

-- SP_ObtenerHistoricoPreciosTicket: Obtiene el historial de precios para un tipo de ticket o para todos.
CREATE OR REPLACE FUNCTION SP_ObtenerHistoricoPreciosTicket(
    p_id_museo NUMERIC DEFAULT NULL,
    p_tipo_ticket VARCHAR(15) DEFAULT NULL,
    p_fecha_desde DATE DEFAULT NULL,
    p_fecha_hasta DATE DEFAULT NULL
)
RETURNS TABLE (
    id_museo NUMERIC,
    nombre_museo VARCHAR,
    fecha_inicio DATE,
    precio NUMERIC,
    tipo_ticket VARCHAR,
    fecha_fin DATE
) AS $$
BEGIN
    RETURN QUERY
    SELECT
        tth.id_museo,
        m.nombre AS nombre_museo,
        tth.fecha_inicio,
        tth.precio,
        tth.tipo_ticket,
        tth.fecha_fin
    FROM
        tipo_ticket_historico tth, museo m
    WHERE
        tth.id_museo = m.id_museo AND
        (p_id_museo IS NULL OR tth.id_museo = p_id_museo) AND
        (p_tipo_ticket IS NULL OR tth.tipo_ticket = p_tipo_ticket) AND
        (p_fecha_desde IS NULL OR tth.fecha_inicio >= p_fecha_desde) AND
        (p_fecha_hasta IS NULL OR tth.fecha_inicio <= p_fecha_hasta OR tth.fecha_fin IS NULL) -- Incluye rangos y precios activos
    ORDER BY
        tth.id_museo, tth.tipo_ticket, tth.fecha_inicio DESC;
END;
$$ LANGUAGE plpgsql;

-- SP_ObtenerPrecioActualTicket: Obtiene el precio actual de un tipo de ticket para un museo.
CREATE OR REPLACE FUNCTION SP_ObtenerPrecioActualTicket(
    p_id_museo NUMERIC,
    p_tipo_ticket VARCHAR(15)
)
RETURNS TABLE (
    id_museo NUMERIC,
    nombre_museo VARCHAR,
    fecha_inicio DATE,
    precio NUMERIC,
    tipo_ticket VARCHAR
) AS $$
BEGIN
    -- Validar que el museo existe
    IF NOT EXISTS (SELECT 1 FROM museo WHERE museo.id_museo = p_id_museo) THEN
        RAISE EXCEPTION 'Museo con ID % no encontrado.', p_id_museo;
    END IF;

    -- Validar el tipo de ticket
    IF p_tipo_ticket NOT IN ('niño', 'adulto', 'tercera edad') THEN
        RAISE EXCEPTION 'El tipo de ticket debe ser "niño", "adulto" o "tercera edad".';
    END IF;

    RETURN QUERY
    SELECT
        tth.id_museo,
        m.nombre AS nombre_museo,
        tth.fecha_inicio,
        tth.precio,
        tth.tipo_ticket
    FROM
        tipo_ticket_historico tth, museo m
    WHERE
        tth.id_museo = m.id_museo AND
        tth.id_museo = p_id_museo AND
        tth.tipo_ticket = p_tipo_ticket AND
        tth.fecha_fin IS NULL; -- Solo el precio actualmente activo
END;
$$ LANGUAGE plpgsql;
